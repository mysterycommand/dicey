{"version":3,"sources":["components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["floor","Math","random","roll","state","payload","total","rolls","sides","reduce","acc","clear","actions","clearRoll","_state","reducer","type","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","dispatch","clickRef","useRef","className","length","join","map","key","onClick","console","log","current","clearTimeout","setTimeout","onDoubleClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAcQA,G,MAAkBC,KAAlBD,OAAOE,EAAWD,KAAXC,OAMTC,EAAO,SAACC,EAAiBC,GAAlB,OACXC,EAAM,eACDF,EADA,CAEHG,MAAM,GAAD,mBAAMH,EAAMG,OAAZ,EAPQC,EAOmBH,EAPDL,EAAME,IAAWM,GAAS,QAA7C,IAACA,GAUXF,EAAQ,SAACF,GAAD,sBACTA,EADS,CAEZE,OAXkBC,EAWAH,EAAMG,MAVxBA,EAAME,QAAO,SAACC,EAAKP,GAAN,OAAeO,EAAMP,IAAM,MADvB,IAACI,GAcdI,EAAQ,iBAAO,CACnBJ,MAAO,GACPD,MAAO,IAKHM,EAEF,CACFT,OACAQ,QACAE,UAPgB,SAACC,EAAkBT,GAAnB,OAAuCF,EALpC,CACnBI,MAAO,GACPD,MAAO,GAG8DD,KAUjEU,EAAwC,SAACX,EAAD,OAAUY,EAAV,EAAUA,KAAMX,EAAhB,EAAgBA,QAAhB,OAC5CO,EAAQI,GAAQJ,EAAQI,GAAMZ,EAAOC,GAAWD,GCnC9Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,mBF0DO,WAAO,IAAD,EACDC,qBAAWT,EApClB,CACnBR,MAAO,GACPD,MAAO,IAiCoB,mBACpBF,EADoB,KACbqB,EADa,KAErBC,EAAWC,kBAAQ,GAEzB,OACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,aACXxB,EAAMG,MAAMsB,OAAS,EAArB,UACMzB,EAAMG,MAAMuB,KAAK,OADvB,cACmC1B,EAAME,OACtCF,EAAME,OAEZ,yBAAKsB,UAAU,gBACb,wBAAIA,UAAU,YACX,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,GAAGG,KAAI,SAAAvB,GAAK,OAC9B,wBAAIwB,IAAG,WAAMxB,GAASoB,UAAU,WAC9B,4BACEA,UAAU,eACVK,QAAS,WACPC,QAAQC,IAAI,UAEc,IAAtBT,EAASU,UACXlB,OAAOmB,aAAaX,EAASU,SAC7BV,EAASU,SAAW,GAGtBV,EAASU,QAAUlB,OAAOoB,YACxB,kBAAMb,EAAS,CAAET,KAAM,OAAQX,QAASG,MACxC,MAGJ+B,cAAe,WACbL,QAAQC,IAAI,iBAEc,IAAtBT,EAASU,UACXlB,OAAOmB,aAAaX,EAASU,SAC7BV,EAASU,SAAW,GAGtBX,EAAS,CAAET,KAAM,YAAaX,QAASG,MAvB3C,IA0BIA,QAKV,4BACEoB,UAAU,mBACVK,QAAS,kBAAMR,EAAS,CAAET,KAAM,YAFlC,aExGQ,MAASwB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.1f10f6ad.chunk.js","sourcesContent":["import React, { FC, useRef, useReducer, Reducer } from 'react';\n\nimport './App.css';\n\ntype AppState = {\n  rolls: number[];\n  total: number;\n};\n\ntype AppAction = {\n  type: string;\n  payload?: any;\n};\n\nconst { floor, random } = Math;\n\nconst rollDie = (sides: number) => floor(random() * sides) + 1;\nconst totalRolls = (rolls: number[]) =>\n  rolls.reduce((acc, roll) => acc + roll, 0);\n\nconst roll = (state: AppState, payload: number) =>\n  total({\n    ...state,\n    rolls: [...state.rolls, rollDie(payload)],\n  });\n\nconst total = (state: AppState) => ({\n  ...state,\n  total: totalRolls(state.rolls),\n});\n\nconst clear = () => ({\n  rolls: [],\n  total: 0,\n});\n\nconst clearRoll = (_state: AppState, payload: number) => roll(clear(), payload);\n\nconst actions: {\n  [action: string]: (state: AppState, payload?: any) => AppState;\n} = {\n  roll,\n  clear,\n  clearRoll,\n};\n\nconst reducer: Reducer<AppState, AppAction> = (state, { type, payload }) =>\n  actions[type] ? actions[type](state, payload) : state;\n\n/**\n * MVP:\n * 1. [x] click a \"d\" button and see a value immediately\n * 2. [x] click a \"d\" button again and see like: \"1 + 2 = 3\"\n * 3. [x] click a \"clear\" button and clear all values\n * 4. [x] double-click a \"d\" button and do 3. then 1.\n *\n * Nice to have:\n * 5. [ ] click a \"reroll\" button and reroll the existing set\n * 6. [ ] click a \"save\" button and store dice sets under a name (e.g. \"battleaxe\")\n *\n * Someday:\n * 7. [ ] multiple users in the same \"room\" see the same output\n * 8. [ ] turn order/initiative\n * 9. [ ] \"advantage\"?\n */\n\nexport const App: FC = () => {\n  const [state, dispatch] = useReducer(reducer, clear());\n  const clickRef = useRef(-1);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-value\">\n        {state.rolls.length > 1\n          ? `${state.rolls.join(' + ')} = ${state.total}`\n          : state.total}\n      </h1>\n      <div className=\"App-controls\">\n        <ul className=\"App-dice\">\n          {[20, 12, 10, 8, 6, 4].map(sides => (\n            <li key={`d${sides}`} className=\"App-die\">\n              <button\n                className=\"App-d-button\"\n                onClick={() => {\n                  console.log('click');\n\n                  if (clickRef.current !== -1) {\n                    window.clearTimeout(clickRef.current);\n                    clickRef.current = -1;\n                  }\n\n                  clickRef.current = window.setTimeout(\n                    () => dispatch({ type: 'roll', payload: sides }),\n                    200,\n                  );\n                }}\n                onDoubleClick={() => {\n                  console.log('double click');\n\n                  if (clickRef.current !== -1) {\n                    window.clearTimeout(clickRef.current);\n                    clickRef.current = -1;\n                  }\n\n                  dispatch({ type: 'clearRoll', payload: sides });\n                }}\n              >\n                d{sides}\n              </button>\n            </li>\n          ))}\n        </ul>\n        <button\n          className=\"App-clear-button\"\n          onClick={() => dispatch({ type: 'clear' })}\n        >\n          clear\n        </button>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}